// <copyright file="FilteredEnumerable.cs" company="Jack Badger Ltd">
// Copyright (c) Jack Badger Ltd. All rights reserved.
// </copyright>

namespace JBLib
{
    using System;
    using System.Collections.Generic;
    using System.Linq;

    public class FilteredEnumerable<TKey, TItem>
    {
        private readonly IDictionary<TKey, IList<TItem>> dict = new Dictionary<TKey, IList<TItem>>();

        private readonly Func<TItem, TKey> keyGenerator;

        /// <summary>
        /// Initializes a new instance of the <see cref="FilteredEnumerable{TKey, TItem}"/> class.
        /// </summary>
        /// <param name="keyGenerator">The key generator.</param>
        /// <autogeneratedoc />
        public FilteredEnumerable(Func<TItem, TKey> keyGenerator)
        {
            this.keyGenerator = keyGenerator;
        }

        /// <summary>
        /// Specifies the behaviour of the FilterSet during <see cref="AddRange"/>.
        /// This does not apply to items already added.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for FilterOption
        public enum FilterOption
        {
            /// <summary>
            /// Items in the FilterSet are ignored during <see cref="AddRange"/>
            /// </summary>
            /// <autogeneratedoc />
            Ignore,

            /// <summary>
            /// Only Items in the FilterSet are added during <see cref="AddRange"/>
            /// </summary>
            /// <autogeneratedoc />
            Collect,
        }

        /// <summary>
        /// Gets or sets the behaviour.
        /// </summary>
        /// <autogeneratedoc />
        public FilterOption Behaviour { get; set; } = FilterOption.Ignore;

        /// <summary>
        /// Gets or sets the filter set.
        /// </summary>
        /// <autogeneratedoc />
        public ISet<TKey> FilterSet { get; set; } = new HashSet<TKey>();

        /// <summary>
        /// Gets the total item count.
        /// </summary>
        /// <autogeneratedoc />
        public int TotalItemCount { get; private set; }

        private bool FilterOptionIgnore => Behaviour == FilterOption.Ignore;

        /// <summary>
        /// Gets the <see cref="IEnumerable{TItem}"/> with the specified key.
        /// </summary>
        /// <param name="key">The key.</param>
        /// <returns>The Items that have been added.</returns>
        /// <autogeneratedoc />
        public IEnumerable<TItem> this[TKey key]
            => dict.TryGetValue(key, out var list) ? list : Enumerable.Empty<TItem>();

        /// <summary>
        /// Adds and groups items as per the <see cref="keyGenerator"/>.
        /// Subject to <see cref="Behaviour"/>
        /// and <see cref="FilterSet"/>.
        /// </summary>
        /// <param name="items">The items.</param>
        /// <returns>The number of items added.</returns>
        /// <autogeneratedoc />
        public int AddRange(IEnumerable<TItem> items)
        {
            int count = 0;

            foreach (var item in items)
            {
                var key = keyGenerator(item);

                if ((!FilterOptionIgnore && FilterSet.Contains(key)) || (FilterOptionIgnore && !FilterSet.Contains(key)))
                {
                    if (!dict.ContainsKey(key))
                    {
                        dict.Add(key, new List<TItem>());
                    }

                    dict[key].Add(item);
                    count += 1;
                }
            }

            TotalItemCount += count;

            return count;
        }
    }
}
